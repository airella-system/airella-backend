openapi: "3.0.0"
info:
  title: Airella API
  version: 1.0.0
servers:
  - url: /api
paths:
  /auth/login:
    post:
      operationId: login
      summary: Login user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:

                  type: string
                password:
                  type: string
      responses:
        '200':
          description: |-
            User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: object
                    properties:
                      token:
                        type: string
                      expirationDate:
                        type: string
                  refreshToken:
                    type: string
                  stationRegistrationToken:
                    type: string
        '403':
          description: |-
            Bad credentials
  /auth/refresh-token:
    post:
      operationId: refresh-token
      summary: Refresh user access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: |-
            User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expirationDate:
                    type: string
        '403':
          description: |-
            Bad refresh token
  /auth/register-user:
    post:
      operationId: register-user
      summary: Register new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: |-
            User created
        '400':
          description: |-
            This username is already taken
        '403':
          description: |-
            Bad refresh token
  /auth/register-station:
    post:
      operationId: register-station
      summary: Register new station
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stationRegistrationToken:
                  type: string
      responses:
        '201':
          description: |-
            New station registered successfully. Returns refreshToken of newly registered station. Id of station is returned in Location header.
          content:
            application/json:
              schema:
                type: object
                properties:
                  refreshToken:
                    type: string
                    description: "Token of newly registered station"
        '400':
          description: |-
            Bad stationRegistrationToken
        '403':
          description: |-
            Bad refresh token
  /stations:
    get:
      operationId: get-stations
      summary: Lists stations
      responses:
        '200':
          description: |-
            Returns all stations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/station-brief'
  /stations/{stationId}:
    get:
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Station id
        - in: query
          name: timespan
          required: false
          schema:
            type: string
            format: date-time
          description: Timespan of queried measurements in ISO 8601 format
          example: 2020-04-02T21:37:00/2020-04-05T22:48:00
        - in: query
          name: interval
          required: false
          schema:
            type: string
            format: date-time
          description: Interval bettwen queried measurements in ISO 8601 format
          example: PT1H
        - in: query
          name: sensors
          required: false
          schema:
            type: string
          description: Filter for sensors - split by comma
          example: pm10,pm25
      operationId: get-station
      summary: Returns information about one station
      responses:
        '200':
          description: |-
            Returns information about one station, including sensor ones.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/station'
  /stations/{stationId}/name:
    put:
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Station id
      operationId: update-station-name
      summary: Updates station name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/station-name'
      responses:
        '200':
          description: |-
            Updates station name.
  /stations/{stationId}/address:
    put:
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Station id
      operationId: update-station-address
      summary: Updates station address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address'
      responses:
        '200':
          description: |-
            Updates station address.
  /stations/{stationId}/location:
    put:
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Station id
      operationId: update-station-location
      summary: Updates station location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location'
      responses:
        '200':
          description: |-
            Updates station location.
  /stations/{stationId}/sensors:
    post:
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Station id
      operationId: add-sensor
      summary: Adds sensor to station
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                id:
                  type: string
      responses:
        '201':
          description: |-
            Adds new sensor. Sensor URI is returned in Location header.
  /stations/{stationId}/sensors/{sensorId}/measurements:
    post:
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Station id
        - in: path
          name: sensorId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Sensor id
      operationId: add-measurement
      summary: Adds measurement to sensor
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: number
      responses:
        '200':
          description: |-
            Added new measurement with current date.
            Adds new sensor. Sensor URI is returned in Location header.
  /search/map:
    get:
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
          description: Latitude of searched area
          example: 50.0680472
        - in: query
          name: longitude
          required: true
          schema:
            type: number
          description: Longitude of searched area
          example: 19.9104095
        - in: query
          name: radius
          required: true
          schema:
            type: number
          description: Radius of searched area in meters
          example: 10000
      operationId: search-map
      summary: Searchs for stations in selected area
      responses:
        '200':
          description: |-
            Successfully searched for stations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/station-brief'
components:
  schemas:
    sensor-brief:
      type: object
      properties:
        type:
          type: string
        value:
          type: number
    sensor:
      type: object
      properties:
        id:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/measurement'
        status:
          type: number
    station-brief:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          address:
            $ref: '#/components/schemas/address'
          location:
            $ref: '#/components/schemas/location'
          airQualityIndex:
            type: number
    station:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          address:
            $ref: '#/components/schemas/address'
          location:
            $ref: '#/components/schemas/location'
          airQualityIndex:
            type: number
          sensors:
            type: array
            items:
              $ref: '#/components/schemas/sensor'
    address:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        street:
          type: string
        number:
          type: string
    location:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
    station-name:
      type: object
      properties:
        name:
          type: string
    measurement:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: number