openapi: "3.0.0"
info:
  title: Airella API
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: "auth"
    description: "Create new account and login"
  - name: "stations"
    description: "Manage stations, sensors, measurements and statistics"
  - name: "search"
    description: "Search for stations"
  - name: "utils"
    description: "Utilities"
paths:
  /auth/login:
    post:
      tags:
        - "auth"
      operationId: logins
      summary: Login user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: |-
            User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: object
                        properties:
                          token:
                            type: string
                          expirationDate:
                            type: string
                      refreshToken:
                        type: string
                      stationRegistrationToken:
                        type: string
        '403':
          description: |-
            Bad credentials
  /auth/refresh-token:
    post:
      tags:
        - "auth"
      operationId: refresh-token
      summary: Refresh user access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: |-
            User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      expirationDate:
                        type: string
        '403':
          description: |-
            Bad refresh token
  /auth/register-user:
    post:
      tags:
        - "auth"
      operationId: register-user
      summary: Register new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: |-
            User created (but not activated)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: |-
            This email is already used
  /auth/activate-user:
    get:
      tags:
        - "auth"
      parameters:
        - in: query
          name: activateString
          required: true
          schema:
            type: string
          description: Activation text sent to email
      operationId: activate-user
      summary: Activate user account
      responses:
        '200':
          description: |-
            User activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: |-
            This email is already used
  /auth/register-station:
    post:
      tags:
        - "auth"
      operationId: register-station
      summary: Register new station
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stationRegistrationToken:
                  type: string
                additionalQuery:
                  $ref: '#/components/schemas/station-query'
      responses:
        '201':
          description: |-
            New station registered successfully. Returns refreshToken of newly registered station. Id of station is returned in Location header.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "Id of newly registered station"
                      refreshToken:
                        type: string
                        description: "Refresh token of newly registered station"
                      accessToken:
                        type: object
                        description: "Access token of newly registered station"
                        properties:
                          token:
                            type: string
                          expirationDate:
                            type: string
        '400':
          description: |-
            Bad stationRegistrationToken
        '403':
          description: |-
            Bad refresh token
  /stations:
    get:
      tags:
        - "stations"
      operationId: get-stations
      summary: List stations
      responses:
        '200':
          description: |-
            Returns all stations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/station-brief'
  /stations/{stationId}:
    get:
      tags:
        - "stations"
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
        - in: query
          name: timespan
          required: false
          schema:
            type: string
            format: date-time
          description: Timespan of queried measurements in ISO 8601 format in UTC (must be 'Z' at the end)
          example: 2020-04-02T21:37:00/2020-04-05T22:48:00Z
        - in: query
          name: interval
          required: false
          schema:
            type: string
            format: date-time
          description: Interval between queried measurements in ISO 8601 format
          example: PT1H
        - in: query
          name: sensors
          required: false
          schema:
            type: string
          description: Filter for sensors - split by comma
          example: pm10,pm25
        - in: query
          name: strategy
          required: false
          schema:
            type: string
          description: Strategy of agregating results - avg, all or latest
          example: avg
      operationId: get-station
      summary: Return information about one station
      responses:
        '200':
          description: |-
            Returns information about one station, including sensor ones.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/station'
    delete:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: delete-station
      summary: Delete station
      responses:
        '200':
          description: |-
            Deletes station, including sensor ones.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /map/at:
    get:
      tags:
        - "search"
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
          description: Latitude of queried point
          example: 50.0680472
        - in: query
          name: longitude
          required: true
          schema:
            type: number
          description: Longitude of queried point
          example: 19.9104095
      operationId: map-at
      summary: Return information about selected point (interpolated)
      responses:
        '200':
          description: |-
            Returns information about selected point.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/virtual-station'
  /stations/{stationId}/name:
    put:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: update-station-name
      summary: Update station name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/station-name'
      responses:
        '200':
          description: |-
            Updates station name.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /stations/{stationId}/address:
    put:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: update-station-address
      summary: Update station address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address'
      responses:
        '200':
          description: |-
            Updates station address.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /stations/{stationId}/location:
    put:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: update-station-location
      summary: Update station location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location'
      responses:
        '200':
          description: |-
            Updated station location.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /stations/{stationId}/sensors:
    post:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: add-sensor
      summary: Add sensor to station
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sensor-add-request'
      responses:
        '201':
          description: |-
            Added new sensor. Sensor URI is returned in Location header.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  success:
                    type: boolean
  /stations/{stationId}/sensors/{sensorId}/measurements:
    post:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
        - in: path
          name: sensorId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Sensor id
      operationId: add-measurement
      summary: Add measurement to sensor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/measurement-add-request'
      responses:
        '200':
          description: |-
            Added new measurement.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /search/map:
    get:
      tags:
        - "search"
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
          description: Latitude of searched area
          example: 50.0680472
        - in: query
          name: longitude
          required: true
          schema:
            type: number
          description: Longitude of searched area
          example: 19.9104095
        - in: query
          name: radius
          required: true
          schema:
            type: number
          description: Radius of searched area in meters
          example: 10000
      operationId: search-map
      summary: Search for stations in selected area
      responses:
        '200':
          description: |-
            Successfully searched for stations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/station-brief'
  /stations/{stationId}/statistics/{statisticId}/values:
    post:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
        - in: path
          name: statisticId
          required: true
          schema:
            type: string
            minimum: 1
          description: Statistic id
      operationId: add-to-statistic
      summary: Add statistic value to statistic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/statistic-value-add-request'
      responses:
        '200':
          description: |-
            Added new element to statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /stations/{stationId}/statistics:
    post:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: add-statistic
      summary: Add statistic to station
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/statistic-add-request'
      responses:
        '201':
          description: |-
            New statistic registered successfully. Id of statistic is returned in Location header.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "Id of newly registered statistic"
    get:
      tags:
        - "stations"
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: get-statistics
      summary: Return information about statistics for station
      responses:
        '200':
          description: |-
            Returned statistics about one station.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/statistics'
  /stations/{stationId}/statistics/{statisticId}:
    delete:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
        - in: path
          name: statisticId
          required: true
          schema:
            type: string
            minimum: 1
          description: Statistic id
      operationId: remove-statistic
      summary: Remove statistic from station
      responses:
        '200':
          description: |-
            Deleted statistic.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
    get:
      tags:
        - "stations"
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
        - in: path
          name: statisticId
          required: true
          schema:
            type: string
            minimum: 1
          description: Statistic id
        - in: query
          name: timespan
          required: false
          schema:
            type: string
            format: date-time
          description: Timespan of queried measurements in ISO 8601 format in UTC (must be 'Z' at the end)
          example: 2020-04-02T21:37:00/2020-04-05T22:48:00Z
        - in: query
          name: interval
          required: false
          schema:
            type: string
            format: date-time
          description: Interval between queried measurements in ISO 8601 format
          example: PT1H
        - in: query
          name: strategy
          required: false
          schema:
            type: string
          description: Strategy of agregating results - for example latest
          example: latest
      operationId: get-statistic
      summary: Return information about one statistic
      responses:
        '200':
          description: |-
            Returned information about one statistic.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/statistic'
  /user/stations:
    get:
      tags:
        - "stations"
      security:
        - bearerAuth: [ ]
      operationId: get-user-stations
      summary: List user stations
      responses:
        '200':
          description: |-
            Returns user stations. User needs to be logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/station-brief'
  /stations/{stationId}/query:
    post:
      tags:
        - "stations"
      parameters:
        - in: path
          name: stationId
          required: true
          schema:
            type: string
            minimum: 1
          description: Station id
      operationId: query-station
      summary: Groups many query endpoints into one
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/station-query'
      responses:
        '200':
          description: |-
            Returns if query was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /utils/datetime:
    get:
      tags:
        - "utils"
      operationId: get-datetime
      summary: Get date and time
      responses:
        '200':
          description: |-
            Returns date and time in ISO8601 and Unix Timestamp format
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/datetime'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    enum-definition:
      type: object
      properties:
        id:
          type: string
          description: identifier of enum
        name:
          type: string
          description: name of statistic for user (visible from frontend)
    sensor-brief:
      type: object
      properties:
        type:
          type: string
        value:
          type: number
    sensor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/measurement'
        status:
          type: number
    station-brief:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          address:
            $ref: '#/components/schemas/address'
          location:
            $ref: '#/components/schemas/location'
          aqi:
            type: number
    statistic-value-add-request:
      type: object
      properties:
        value:
          type: object
          description: value of new statistic value
    sensor-add-request:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        name:
          type: string
          description: name of sensor (visible on frontend)
    measurement-add-request:
      type: object
      properties:
        value:
          type: number
        date:
          type: string
          description: "Optional argument - date in ISO 8601 without timezone (must end with \"Z\"). If not provided, current date will be taken."
    statistic-add-request:
      type: object
      properties:
        privacyMode:
          type: string
          description: PUBLIC or PRIVATE
        type:
          type: string
          description: ONE_STRING, MULTIPLE_ENUMS, MULTIPLE_FLOATS
        id:
          type: string
          description: id of statistic
        name:
          type: string
          description: name of statistic (visible on frontend)
        enumDefinitions:
          type: array
          description: only applicable to MULTIPLE_ENUMS type
          items:
            $ref: '#/components/schemas/enum-definition'
        metric:
          type: string
          description: only applicable to MULTIPLE_FLOATS type - defines metric which will be displayed on frontend (for example V if this is statistic about voltage)
    station:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          address:
            $ref: '#/components/schemas/address'
          location:
            $ref: '#/components/schemas/location'
          aqi:
            type: number
          sensors:
            type: array
            items:
              $ref: '#/components/schemas/sensor'
    virtual-station:
      type: array
      items:
        type: object
        properties:
          aqi:
            type: number
          sensors:
            type: array
            items:
              $ref: '#/components/schemas/sensor'
    address:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        street:
          type: string
        number:
          type: string
    location:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
    station-name:
      type: object
      properties:
        name:
          type: string
    measurement:
      type: object
      properties:
        timespan:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        timestamp:
          type: string
          format: date-time
        value:
          type: number
    statistic-value:
      type: object
      properties:
        timespan:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        timestamp:
          type: string
          format: date-time
        value:
          type: object
    statistic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        privacyMode:
          type: string
        metric:
          type: string
          description: Only if type is MULTIPLE_FLOATS
        enumDefinitions:
          type: array
          description: Only if type is MULTIPLE_ENUMS
          items:
            $ref: '#/components/schemas/enum-definition'
        values:
          type: array
          items:
            $ref: '#/components/schemas/statistic-value'
    statistics:
      type: object
      properties:
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/statistic'
    station-query:
      type: object
      properties:
        add:
          type: object
          properties:
            sensors:
              type: array
              items:
                $ref: '#/components/schemas/sensor-add-request'
            statistics:
              type: array
              items:
                $ref: '#/components/schemas/statistic-add-request'
            measurements:
              type: array
              items:
                type: object
                properties:
                  sensorId:
                    type: string
                  measurement:
                    $ref: '#/components/schemas/measurement-add-request'
            statisticValues:
              type: array
              items:
                type: object
                properties:
                  statisticId:
                    type: string
                  statisticValue:
                    $ref: '#/components/schemas/statistic-value-add-request'
        set:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/station-name'
            address:
              $ref: '#/components/schemas/address'
            location:
              $ref: '#/components/schemas/location'
    datetime:
      type: object
      properties:
        iso8601utc:
          type: string
          description: Actual date and time in ISO8601 format in UTC
        unixTimestamp:
          type: integer
          description: Unix Timestamp
